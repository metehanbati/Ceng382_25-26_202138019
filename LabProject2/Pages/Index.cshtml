@page
@model LabProject2.Pages.IndexModel
@{
    ViewData["Title"] = "Class Management";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    @* Left Column: Add/Edit Form *@
    <div class="col-md-4">
         <h2>@(Model.EditId.HasValue ? "Edit Class" : "Add New Class")</h2>
         <hr />
         <form method="post">
             <div asp-validation-summary="ModelOnly" class="text-danger"></div>
              @if (Model.EditId.HasValue)
              {
                  <input type="hidden" asp-for="InputModel.Id" />
              }
              <div class="mb-3">
                  <label asp-for="InputModel.ClassName" class="form-label"></label>
                  <input asp-for="InputModel.ClassName" class="form-control" />
                  <span asp-validation-for="InputModel.ClassName" class="text-danger"></span>
              </div>
              <div class="mb-3">
                  <label asp-for="InputModel.StudentCount" class="form-label"></label>
                  <input asp-for="InputModel.StudentCount" type="number" class="form-control" />
                  <span asp-validation-for="InputModel.StudentCount" class="text-danger"></span>
              </div>
              <div class="mb-3">
                  <label asp-for="InputModel.Description" class="form-label"></label>
                  <textarea asp-for="InputModel.Description" class="form-control" rows="3"></textarea>
                  <span asp-validation-for="InputModel.Description" class="text-danger"></span>
              </div>

              @if (Model.EditId.HasValue)
              {
                  <button type="submit" class="btn btn-primary" asp-page-handler="Edit">Update Class</button>
                  <a asp-page="./Index" asp-route-searchTerm="@Model.SearchTerm" asp-route-currentPage="@Model.CurrentPage" class="btn btn-secondary">Cancel Edit</a>
              }
              else
              {
                  <button type="submit" class="btn btn-success" asp-page-handler="Add">Add Class</button>
              }
          </form>
    </div>

    @* Right Column: Filter, Table, and Pagination *@
    <div class="col-md-8">
        <h2>Class List</h2>
        <hr />

        @* Filter Form (Uses GET) *@
        <form method="get" class="mb-3">
            <div class="input-group">
                <input type="text" asp-for="SearchTerm" class="form-control" placeholder="Filter by Class Name..." />
                <button type="submit" class="btn btn-primary">Filter</button>
                <a asp-page="./Index" class="btn btn-outline-secondary">Clear</a>
            </div>
        </form>

        @* Table - Uses DisplayClasses and hides ID column *@
        @if (!Model.DisplayClasses.Any())
        {
            <p>@(string.IsNullOrWhiteSpace(Model.SearchTerm) ? "No classes have been added yet." : "No classes found matching your filter.")</p>
        }
        else
        {
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        @* ID column removed as per requirements *@
                        <th>Class Name</th>
                        <th>Student Count</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.DisplayClasses)
                    {
                        <tr>
                            <td>@item.ClassName</td>
                            <td>@item.StudentCount</td>
                            <td>@item.Description</td>
                            <td>
                                <a asp-page="./Index"
                                   asp-route-EditId="@item.Id"
                                   asp-route-searchTerm="@Model.SearchTerm"
                                   asp-route-currentPage="@Model.CurrentPage"
                                   class="btn btn-sm btn-warning me-1">Edit</a>

                                <form method="post"
                                      asp-page-handler="Delete"
                                      asp-route-id="@item.Id"
                                      asp-route-searchTerm="@Model.SearchTerm"
                                      asp-route-currentPage="@Model.CurrentPage"
                                      style="display:inline;">
                                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure?');">Delete</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @* Pagination Controls *@
            <nav aria-label="Class list navigation">
                <ul class="pagination justify-content-center">
                    @* Previous Button *@
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" asp-page="./Index"
                           asp-route-currentPage="@(Model.CurrentPage - 1)"
                           asp-route-searchTerm="@Model.SearchTerm">Previous</a>
                    </li>

                    @* Smart Pagination that doesn't show too many links *@
                    @{
                        int pagesToShow = 5;
                        int startPage = Math.Max(1, Model.CurrentPage - (pagesToShow / 2));
                        int endPage = Math.Min(Model.TotalPages, startPage + pagesToShow - 1);
                        
                        // Adjust startPage if we're near the end
                        if (endPage - startPage + 1 < pagesToShow && startPage > 1)
                        {
                            startPage = Math.Max(1, endPage - pagesToShow + 1);
                        }
                    }

                    @* First Page *@
                    @if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-page="./Index"
                               asp-route-currentPage="1"
                               asp-route-searchTerm="@Model.SearchTerm">1</a>
                        </li>
                        @if (startPage > 2)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                    }

                    @* Page Numbers *@
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-page="./Index"
                               asp-route-currentPage="@i"
                               asp-route-searchTerm="@Model.SearchTerm">@i</a>
                        </li>
                    }

                    @* Last Page *@
                    @if (endPage < Model.TotalPages)
                    {
                        @if (endPage < Model.TotalPages - 1)
                        {
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        }
                        <li class="page-item">
                            <a class="page-link" asp-page="./Index"
                               asp-route-currentPage="@Model.TotalPages"
                               asp-route-searchTerm="@Model.SearchTerm">@Model.TotalPages</a>
                        </li>
                    }

                    @* Next Button *@
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                         <a class="page-link" asp-page="./Index"
                            asp-route-currentPage="@(Model.CurrentPage + 1)"
                            asp-route-searchTerm="@Model.SearchTerm">Next</a>
                    </li>
                </ul>
            </nav>
            <p class="text-center">Page @Model.CurrentPage of @Model.TotalPages (Total Records: @Model.TotalRecords)</p>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}